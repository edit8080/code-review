name: "Gemini Code Review Action"
description: "Runs code review on a PR diff using the Gemini API."

inputs:
  gemini-api-key:
    description: "API key for the Gemini API"
    required: true
  github-token:
    description: "GitHub token for posting comments"
    required: true
  prompt-type:
    description: "The type of prompt to use"
    required: false
    default: "default"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install Dependencies
      shell: bash
      run: pip install google-generativeai

    - name: Get PR Diff
      id: get_diff
      shell: bash
      run: |
        PR_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        echo "PR_DIFF<<EOF" >> $GITHUB_ENV
        echo "$PR_DIFF" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Set Prompt Path Based on Type
      id: set_prompt
      shell: bash
      run: |
        FILE_PATH="${{ github.action_path }}/prompts/${{ inputs.prompt-type }}.md"

        if [[ ! -f "$FILE_PATH" ]]; then
          echo "Prompt file not found for type '${{ inputs.prompt-type }}'."
          exit 1
        fi

        echo "PROMPT_PATH=$FILE_PATH" >> $GITHUB_ENV

    - name: Run AI Code Review
      id: review
      shell: bash
      run: python ${{ github.action_path }}/review.py
      env:
        GEMINI_API_KEY: ${{ inputs.gemini-api-key }}

    - name: Post Review Comment as a Review
      uses: actions/github-script@v7
      env:
        GENERAL_REVIEW: ${{ steps.review.outputs.general_review }}
        LINE_COMMENTS: ${{ steps.review.outputs.line_comments }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const generalReview = process.env.GENERAL_REVIEW;
          const lineComments = JSON.parse(process.env.LINE_COMMENTS);

          if (lineComments.length > 0) {
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_id: "${{ github.event.pull_request.head.sha }}",
              body: generalReview,
              event: "COMMENT",
              comments: lineComments
            });
          } else {
            if (generalReview && generalReview.trim() !== "") {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `ðŸ¤– **Gemini AI General Review**\n\n${generalReview}`
              });
            }
          }
